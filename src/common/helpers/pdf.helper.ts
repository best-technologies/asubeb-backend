import PDFDocument = require('pdfkit');
import * as QRCode from 'qrcode';

export interface StudentAssessmentItem {
  subjectName: string;
  score: number;
  maxScore: number;
  percentage: number;
  type: string;
}

export interface StudentResultPayload {
  studentName: string;
  studentId: string;
  gender?: string | null;
  schoolName?: string | null;
  className?: string | null;
  sessionName: string;
  termName: string;
  assessments: StudentAssessmentItem[];
}

export async function generateStudentResultPdf(payload: StudentResultPayload): Promise<Buffer> {
  const doc = new PDFDocument({ size: 'A4', margin: 50 });
  const buffers: Buffer[] = [];
  doc.on('data', (chunk: Buffer) => buffers.push(chunk));

  // Header banner
  const startY = doc.y;
  doc.save();
  doc.rect(50, startY, 495, 60).fill('#0ea5e9');
  doc.fill('#ffffff').fontSize(20).text('ASUBEB â€” Student Result', 60, startY + 15, { align: 'left' });
  doc.restore();

  doc.moveDown(2.5);

  // Student meta card (enhanced design)
  const infoTop = doc.y;
  const cardHeight = 110;
  doc.save();
  doc.roundedRect(50, infoTop, 495, cardHeight, 10).fill('#f8fafc').stroke('#e5e7eb');
  doc.restore();

  const leftX = 66;
  const rightX = 325;

  const drawField = (label: string, value: string | null | undefined, x: number, y: number) => {
    doc.fill('#6b7280').fontSize(9).text(label.toUpperCase(), x, y);
    doc.fill('#111827').fontSize(12).text(String(value ?? 'N/A'), x, y + 12);
  };

  // Left column
  let y = infoTop + 12;
  drawField('Student', `${payload.studentName} (${payload.studentId})`, leftX, y);
  y += 32;
  drawField('School', payload.schoolName ?? 'N/A', leftX, y);
  y += 32;
  drawField('Session', payload.sessionName, leftX, y);

  // Right column
  y = infoTop + 12;
  drawField('Gender', payload.gender ?? 'N/A', rightX, y);
  y += 32;
  drawField('Class', payload.className ?? 'N/A', rightX, y);
  y += 32;
  drawField('Term', payload.termName, rightX, y);

  doc.moveDown(7);

  // Totals line
  const totalSubjects = payload.assessments.length;
  doc.fontSize(11).fill('#111827').text(`Total subjects: ${totalSubjects}`, 50, doc.y + 6);
  doc.moveDown(0.6);

  // Table header
  const headerY = doc.y;
  doc.rect(50, headerY, 495, 24).fill('#f3f4f6');
  doc.fill('#111827').fontSize(11);
  doc.text('SN', 60, headerY + 6);
  doc.text('Subject', 95, headerY + 6);
  doc.text('Type', 300, headerY + 6);
  doc.text('Score', 380, headerY + 6);
  doc.text('Max', 440, headerY + 6);
  doc.moveDown(2);

  // Rows
  let totalScore = 0;
  let totalMax = 0;
  payload.assessments.forEach((item, index) => {
    totalScore += item.score;
    totalMax += item.maxScore;
    const rowY = doc.y;
    if (index % 2 === 0) {
      doc.rect(50, rowY - 2, 495, 20).fill('#fafafa');
      doc.fill('#111827');
    }
    doc.fontSize(11)
      .text(String(index + 1), 60, rowY)
      .text(item.subjectName, 95, rowY)
      .text(item.type, 300, rowY)
      .text(String(item.score), 380, rowY)
      .text(String(item.maxScore), 440, rowY);
    doc.moveDown(1.1);
  });

  doc.moveDown(0.8);
  doc.moveTo(50, doc.y).lineTo(545, doc.y).stroke('#e5e7eb');
  doc.moveDown(0.8);

  const overallPct = totalMax > 0 ? (totalScore / totalMax) * 100 : 0;
  const summaryTop = doc.y;
  doc.roundedRect(325, summaryTop - 6, 220, 42, 6).fill('#f9fafb').stroke('#e5e7eb');
  doc.fill('#111827').fontSize(11)
    .text(`Total Score: ${totalScore}/${totalMax}`, 335, summaryTop)
    .text(`Overall Percentage: ${Math.round(overallPct * 100) / 100}%`, 335, summaryTop + 16);
  doc.moveDown(2);

  // QR code footer
  const verifyUrl = `https://www.besttechnologiesltd.com/asubeb/verify-result/${encodeURIComponent(payload.studentId)}`;
  const qrPng = await QRCode.toBuffer(verifyUrl, { width: 80, margin: 0 });
  const pageHeight = (doc as any).page.height || 792;
  let footerY = doc.y + 6;
  if (footerY > pageHeight - 120) {
    doc.addPage();
    footerY = 60;
  }
  doc.image(qrPng, 50, footerY, { width: 80, height: 80 });
  doc.fontSize(9).fillColor('#6b7280').text('Scan to verify result', 135, footerY + 8);
  // doc.fontSize(9).fillColor('#0ea5e9').text(verifyUrl, 135, footerY + 24, { link: verifyUrl, underline: true });
  doc.fontSize(9).fillColor('#6b7280').text('Generated by ASUBEB', 400, footerY + 60, { align: 'left' });

  return new Promise<Buffer>((resolve) => {
    doc.on('end', () => {
      const out = Buffer.concat(buffers);
      resolve(out);
    });
    doc.end();
  });
}


